public class Solution {
    public ArrayList<String> letterCombinations(String digits) {
        
        HashMap<Character, String> map = new HashMap<Character, String>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");
        
        return combo(digits, map);
        
    }
    
    public ArrayList<String> combo(String s, HashMap<Character,String> map)
    {
        ArrayList<String> ret = new ArrayList<String>();
        if (s.isEmpty())
        {
            ret.add("");
            return ret;
        }

        ArrayList<String> subs = null;
        if (s.length()>1)
            subs = combo(s.substring(1, s.length()), map);
        char c = s.charAt(0);
        String pool = map.get(c);
        for (int i=0; i<pool.length(); i++)
        {
            if (s.length()>1)
                for (String ss : subs)
                    ret.add(pool.charAt(i) + ss);
            else
                 ret.add(String.valueOf(pool.charAt(i)));
        }
        return ret;
    }
}
