public class Solution {
    
    
    
    public double findMedianSortedArrays(int A[], int B[]) {
        
        if (A.length == 0 && B.length == 0)
            return 0.0;
            
        int offset = (A.length + B.length - 1)/2;
            
        if ((A.length + B.length)%2 == 0)
        {
            double r1 = find(A, 0, A.length-1, B, 0, B.length-1, offset);
            double r2 = find(A, 0, A.length-1, B, 0, B.length-1, offset+1);
            return (r1+r2)/2;
        }
        else
        {
            return find(A, 0, A.length-1, B, 0, B.length-1, offset);
        }
        
    }
    
    public double find(int[] A, int as, int ae, int[] B, int bs, int be, int offset)
    {
        if (as > ae)    // A is empty
            return B[bs+offset];
        
        if (bs > be)
            return A[as+offset];      
        
        int am = (as + ae)/2;
        int bm = (bs + be)/2;
        
        if (A[am] > B[bm])
        {
            if (offset < am-as+bm-bs+1)
                return find(A, as, am-1, B, bs, be, offset);
            else
                return find(A, as, ae, B, bm+1, be, offset - (bm-bs+1));
        }
        else
        {
            if (offset < am-as+bm-bs+1)
                return find(A, as, ae, B, bs, bm-1, offset);
            else
                return find(A, am+1, ae, B, bs, be, offset - (am-as+1));
            
        }
        
    }
}
