/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        l1 = reverse(l1);
        l2 = reverse(l2);
        
        ListNode sum = null;
        ListNode pre = null;
        ListNode head = null;
        int carry = 0;
        while (l1 != null && l2 != null)
        {
            if (l1.val + l2.val + carry >= 10)
            {
               
                sum = new ListNode(l1.val + l2.val + carry - 10);
                carry = 1;
            }
            else
            {
                sum = new ListNode(l1.val + l2.val + carry);
                carry = 0; 
            }
            if (pre!=null)
                pre.next = sum;
            else head = sum;
            pre = sum;
            
            l1 = l1.next;
            l2 = l2.next;
        }

        
        while (l1 != null)
        {
            if (l1.val + carry >= 10)
            {
               
                sum = new ListNode(l1.val + carry - 10);
                carry = 1;
            }
            else
            {
                sum = new ListNode(l1.val + carry);
                carry = 0; 
            }
            if (pre!=null)
                pre.next = sum;
            else head = sum;
            pre = sum;
            l1 = l1.next;
        }
        while (l2 != null)
        {
            if (l2.val + carry >= 10)
            {
               
                sum = new ListNode(l2.val + carry - 10);
                carry = 1;
            }
            else
            {
                sum = new ListNode(l2.val + carry);
                carry = 0; 
            }
            if (pre!=null)
                pre.next = sum;
            else head = sum;
            pre = sum;
            l2 = l2.next;
        }
        
        if (carry == 1)
        {
            sum = new ListNode(1);
            pre.next = sum;
            pre = sum;
        }
        
        
        return head;
        
    }
    
    ListNode reverse(ListNode l)
    {
        ListNode pl = null;
        ListNode nl = null;
        while (l != null)
        {
            nl = new ListNode(l.val);
            nl.next = pl;
            pl = nl;
            l = l.next;
        }
        return nl;
    }
}
