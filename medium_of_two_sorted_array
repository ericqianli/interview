public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
        // Start typing your Java solution below
        // DO NOT write main() function
        return find(A, A.length, B, B.length, (A.length+B.length-1)/2);
    }
    
        
    public int[] sub_array(int AA[], int s, int e)
    {
        int[] BB = new int[e-s];
        for (int i=s; i<e; i++)
            BB[i-s] = AA[i];
        return BB;
    }
    
    public double find(int A[], int m, int B[], int n, int ir) // ir: increasing rank
    {
        if (m==0)
            return B[ir];
        if (n ==0)
            return A[ir];
        if (ir == 0)
            return (A[0] < B[0]) ? A[0] : B[0];
        if (ir == m+n-1)
            return (A[m] < B[n]) ? B[n] : A[m];
        int am = A[(m-1)/2];
        int bm = B[(n-1)/2];
        if (m==1)
        {
            if (A[0]>=B[ir])
                return B[ir];
            else
                return (A[0]>=B[ir-1]) ? A[0] : B[ir-1];
        }
        if (n==1)
        {
            if (B[0]>=A[ir])
                return A[ir];
            else
                return (B[0]>=A[ir-1]) ? B[0] : A[ir-1];
        }
        if (bm < am)
        {
            if (ir >= (m+n-1)/2)
            {
                int[] BB = sub_array(B, n/2, n);
                return find(A, m , B, n-n/2, ir-n/2);
            }
            else
            {
                int[] AA = sub_array(A, 0, (m-1)/2+1);
                return find(AA, (m-1)/2+1, B, n, ir);
            }
        }
        else
        {
            if ( ir < (m+n-1)/2)
            {
                int[] BB = sub_array(B, 0, (n-1)/2+1);
                return find(A, m, BB, (n-1)/2+1, ir);
            }
            else
            {
                int[] AA = sub_array(A, m/2, m);
                return find(AA, m-m/2, B, n, ir-m/2);
            }
            
        }
    }
}
