
class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n)
    {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return find(A, m, B, n, (m+n+1)/2);
    }
    
    int[] subarray(int A[], s, e)
    {
        int[] B = new int[e-s];
        for (int i=s; i<e; i++)
            B[i-s] = A[i];
        return B;
    }
    
    double find(int A[], int m, int B[], int n, int ir) // ir: increasing rank
    {
        if (m==0)
            return B[ir];
        if (n ==0)
            return A[ir];
        if (ir == 0)
            return (A[0] < B[0]) ? A[0] : B[0];
        if (ir == m+n-1)
            return (A[m] < B[n]) ? B[n] : A[m];
        int am = A[(m-1)/2];
        int bm = B[(n-1)/2];
        if (bm < am)
        {
            if (ir >= (m+n-1)/2)
            {
                int[] BB = subarray(B, (n-1)/2, n)   
                return find(A, m , B, n-(n-1)/2, ir-(n-1)/2);
            }
            else
            {
                int[] AA = subarray(A, 0, (m-1)/2);
                return find(AA, (m-1)/2), B, n, ir);
            }
        }
        else
        {
            if ( ir <= (m+n-1)/2)
            {
                int[] BB = subarray(B, 0, (n-1)/2);
                return find(A, m, BB, (n-1)/2, ir);
            }
            else
            {
                int[] AA = subarray(A, (m-1)/2, m);
                return find(AA, m-(m-1)/2, B, n, ir-(m-1)/2);
            }
            
        }
    }
};
