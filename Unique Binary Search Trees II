/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public ArrayList<TreeNode> generateTrees(int n) {
        
        
        if (n == 0)
        {
            ArrayList<TreeNode> ret = new ArrayList<TreeNode>();
            ret.add(null);
            return ret;
        }
            
        return gen(1, n);
        
    }
    
    public ArrayList<TreeNode> gen(int s, int e)
    {
        ArrayList<TreeNode> ret = new ArrayList<TreeNode>();
        if (s > e)
        {
            ret.add(null);
            return ret;
        }
        
        if (s == e)
        {
            ret.add(new TreeNode(s));
            return ret;
        }
        
        for (int i=s; i<=e; i++)
        {
            ArrayList<TreeNode> lefts = gen(s, i-1);
            ArrayList<TreeNode> rights = gen(i+1, e);
            
            for (TreeNode l : lefts)
            {
                for (TreeNode r : rights)
                {
                    TreeNode root = new TreeNode(i);
                    root.left = l;
                    root.right = r;
                    ret.add(root);
                }
            }
        }
        
        return ret;
    }
}
