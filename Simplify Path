public class Solution {
    public String simplifyPath(String path) {
        
        Stack<String> s = new Stack<String>();
        
        while(!path.isEmpty())
        {
            if (path.startsWith("/.."))
            {
                if (!s.isEmpty())
                    s.pop();
                path = path.substring(3, path.length());
                continue;
            }
            if (path.startsWith("/."))
            {
                if (path.length() > 2 && path.charAt(2) == '/' || path.length() == 2)
                    path = path.substring(2, path.length());
                else
                    path = path.substring(1, path.length());
                continue;
            }
            if (path.startsWith("/"))
            {
                path = path.substring(1, path.length());
                continue;
            }
            int index = path.indexOf("/");
            if (index == -1)
            {
                s.push(path);
                path = "";
            }
            else
            {
                String dir = path.substring(0, index);
                path = path.substring(index, path.length());
                s.push(dir);
            }
        }
        
        String ret = "";
        
        if (s.isEmpty())
            return "/";
        
        while (!s.isEmpty())
        {
            ret = "/" + s.pop() + ret;
        }
        
        return ret;
        
    }
}
