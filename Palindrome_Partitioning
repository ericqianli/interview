public class Solution {
    public ArrayList<ArrayList<String>> partition(String s) {
        
        return part(s);
        
    }
    
    public ArrayList<ArrayList<String>> part(String s)
    {
        ArrayList<ArrayList<String>> ret = new ArrayList<ArrayList<String>>();
        
        if (s == null || s.length() == 0)
        {
            ret.add(new ArrayList<String>());
            return ret;
        }
        
        if (s.length() == 1)
        {
            ArrayList<String> ss = new ArrayList<String>();
            ss.add(s);
            ret.add(ss);
            return ret;
        }
        
        // length > 1
        ArrayList<String> cand = start(s);
        for (String head : cand)
        {
            ArrayList<ArrayList<String>> rest = part(s.substring(head.length(), s.length()));
            for (ArrayList<String> tail : rest)
            {
                tail.add(0, head);
                ret.add(tail);
            }
        }
        return ret;
        
    }
    
    public ArrayList<String> start(String s)
    {
        ArrayList<String> ret = new ArrayList<String>();
        if (s == null || s.length()==0)
            return ret;
        for (int i=1; i<=s.length(); i++)
        {
            String test = s.substring(0,i);
            if (validate(test))
                ret.add(test);
        }
        return ret;
        
    }
    
    public boolean validate(String s)
    {
        if (s == null)
            return false;
        if (s.length() <= 1)
            return true;
        for (int i=0; i<s.length()/2; i++)
        {
            if (s.charAt(i) != s.charAt(s.length()-i-1))
                return false;
        }
        return true;
    }
}
