public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        if (k==1)
            return head;
        
        ListNode p1 = head;
        ListNode pre = null;
        
        while(hasK(p1, k))
        {
            ListNode nhead = null;
            ListNode ntail = null;
            ListNode nnext = null;
            
            ListNode tail = null;
            for (int i=0; i<k; i++)
            {
                ListNode nn = new ListNode(p1.val);
                if (i == 0)
                    ntail = nn;
                if (i == k-1)
                    nhead = nn;
                nn.next = nnext;
                nnext = nn;
                p1 = p1.next;
            }
            
            if (pre == null)
                head = nhead;
            else
                pre.next = nhead;
                
            ntail.next = p1;
            
            //p1 = ntail.next;
            pre = ntail;

        }
        return head;
    }
    
    ListNode getL(ListNode h, int l)
    {
        for (int i=0; i<l; i++)
        {
            h = h.next;
        }
        return h;
    }
    
    boolean hasK(ListNode h, int k)
    {
        for (int i=0; i<k; i++)
        {
            if (h == null)
                return false;
            h = h.next;
        }
        return true;
    }
}
